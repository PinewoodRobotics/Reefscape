plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.2.1"
    id "groovy" // Required for ConfigSlurper
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

ext {
    alreadyAdded = []
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
        url 'https://frcmaven.wpi.edu/artifactory/release/'
    }
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define deploy target and artifacts
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {}

                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false

def includeDesktopSupport = false

// Define project dependencies
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'com.google.code.gson:gson:2.10.1'
}

buildDynamically("./config.ini")

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation settings
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Create a fat jar (including all dependencies) and set the manifest for WPILib
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Set the jar task for deployment
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure the string concatenation setting for inline compilation
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

def buildDynamically(configFilePath) {
    exec {
        commandLine "python3", "scripts/clone_and_build_repos.py", "--config-file-path", configFilePath
        standardOutput = new ByteArrayOutputStream()
        errorOutput = new ByteArrayOutputStream()
    }

    def jarFiles = fileTree(dir: "lib/build", include: '*.jar')

    project.afterEvaluate {
        dependencies {
            implementation files(jarFiles)
        }
    }
}

tasks.register("buildDynamically") {
    group = "custom"
    description = "Build dependencies dynamically using the configuration file"

    doLast {
        def configFilePath = "./config.ini"
        buildDynamically(configFilePath)
    }
}